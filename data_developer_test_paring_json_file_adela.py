# -*- coding: utf-8 -*-
"""Data Developer Test - Paring JSON file - Adela

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZZo7eFA82VdxnFmii1cMZw3bJkG4dNIM
"""

# Install packages for data wrangling 
import pandas as pd
import json

from google.colab import files 

# Upload JSON file  
uploaded = files.upload()  

# Load JSON file
with open('ubo1.json','r') as f:
    # Read the file content as text
    json_text = f.read()
    
    # Replace single quotes with double quotes
    json_text = json_text.replace("'", "\"")
    # Insert missing quotes around property names
    json_data = json_data.replace('"{', '{"').replace('}"', '"}').replace('":', '":')

    # Convert 'True' to lowercase
    json_data = json_data.replace('True', 'true')
    
    # Load JSON from the updated text
    try:
        data = json.loads(json_text,parse_constant=str)
    except json.JSONDecodeError as e:
        print("Error parsing JSON:", e)

# Print JSON data
print(data)

# Convert JSON data to formatted string
print(json.dumps(json_data, indent=4))
data = json.dumps(json_data)

print(type(data))  # Check if data is a list or dictionary

# Converting the string to a dictionary first
json_string = '{"key": "value"}'
data = json.loads(json_string)  # converting the string to a dictionary


def flatten_json(data, prefix=''):
    flattened_data = {}
    for key, value in data.items():
        if isinstance(value, dict):
            flattened_data.update(flatten_json(value, prefix + key + '_'))
        else:
            flattened_data[prefix + key] = value
    return flattened_data

flattened_data = flatten_json(data)

print(data)

del data['api_version']

print(data)

df = pd.DataFrame.from_dict(data, orient='index')

# Explore data frame
df.head()  # Display first few rows of the data frame
# df.info()  # Display information about the data frame
# df.describe()  # Display statistical summary of the data frame

# Remove index
df.reset_index(drop=True, inplace=True)

# Convert DataFrame back to JSON
json_output = df.to_json(orient="records")

print(json_output)

type(json_output)

# Convert JSON to dict and to a tabular format

tbl = json.loads(json_output)

tbl_companies = pd.json_normalize(tbl,"companies")

tbl_companies.head()